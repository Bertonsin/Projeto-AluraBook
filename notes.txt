Aula 1 -

O padrão do javascript é um sistema sincrono, no qual uma tarefa é concluida apos
a outra

No javascript assíncrono existem tarefas sendo executadas em segundo plano

Dento do javascript o código pode ser separado em 3 partes importantes, o event loop que 
verifica e manda os itens para callstack, o call stack chama tudo que acontece na tela e o
task queue que é responsavel pelo sistema sincrono. O task queue basicamente é um "fila" em 
que os itens "esperam" para irem ao call stack e serem chamados e executados, ocorrendo quando
alguma função como o setTimeout por exemplo coloca uma condição de tempo ou algo assim

Uma explicação mais direta: 

 O Event Loop é um ciclo que monitora e executa as ações que mandamos para o JavaScript.

 A call stack é um mecanismo que organiza como irá funcionar o script quando existem muitas funções: qual função está sendo executada, quais estão sendo chamadas dentro de alguma função, etc.
 
 A task queue é a fila de tarefas assíncronas.


Aula 2 - 

call back são funções que são enviadas como parâmetros para outras funções

Api viacep - api é interface de programação de aplicações

a api permite a conexão entre cliente e servidor

Fetch - é um método assíncrono com um parâmetro obrigatório a url da API que retorna uma promise

Promise - é uma promessa de que algo vai acontecer e ela pode retornar que foi resolvida ou rejeitada, permitindo que métodos assíncronos se tornem síncronos

A promise recebe 2 parâmetros o resolve e reject que são funções callbacks

Existem 3 estados para a promise fulfield(completa),reject(rejeitou,erro),pending(não concluiu)


Aula 3 - 

Uma promise sempre retorna um objeto do tipo response, mesmo que ela seja rejeitada ou resolvida

O objeto do tipo response precisa ser convertido em json

o then pode ser traduzido como um então, que definirá o que acontecerá com a promise

o then pega a requisição e faz algo com o que foi retornado

O catch é um método assim como o then, que "pega" os erros

Quando for um erro de cep inexistente por exemplo, não cairá no catch e será preciso 
usar um throw Error para gerar um erro que será pego pelo catch

O finally é outro método, que independente da resposta da promessa ele é executado

O protocolo HTTP permite a transmissão de "hiper textos" entre máquinas, e possui algumas
regras, ou seja, realmente é um protocolo a ser seguido

Dentro do protocolo HTTP existe uma requisição(request) e uma resposta(response)

Nas responses são retornados 1 código e um motivo que dá significado ao código

Existem alguns tipos de response: 

1XX: Informativo – a solicitação foi aceita ou está em andamento;
2XX: Confirmação – a solicitação foi concluída ou entendida;
3XX: Redirecionamento – faltou alguma coisa na solicitação;
4XX: Erro do cliente – houve um erro na solicitação;
5XX: Erro no servidor – houve uma falha no servidor durante a solicitação.


Aula 4 -

Callback hell - quando se usa muitos then e existem muitas funções callbacks

outra maneira de criar uma função assincrona é atraves do async function

usando a função async function é preciso usar o await dentro dela

try é um método que envolve a função e "tenta" responder corretamente, caso não consiga
cai no catch que deve ser colocado logo após

promise.all - ajuda a fazer várias requisições ao mesmo tempo